How to Use 7-base_geometry.py
===========================

This module defines the BaseGeometry class, which contains two methods:

area: Raises an exception when called, indicating the method is not yet implemented.
integer_validator: Validates if a value is a positive integer.

===========================
#main file:
#!/usr/bin/python3
BaseGeometry = __import__('7-base_geometry').BaseGeometry

bg = BaseGeometry()

bg.integer_validator("my_int", 12)
bg.integer_validator("width", 89)

try:
    bg.integer_validator("name", "John")
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("age", 0)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    bg.integer_validator("distance", -4)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

===========================
BaseGeometry class definition:
#!/usr/bin/python3
"""
contains the BaseGeometry class
"""

class BaseGeometry:
    """A class for base geometry."""

    def area(self):
        """Raises an exception indicating area is not implemented."""
        raise Exception("area() is not implemented")

    def integer_validator(self, name, value):
        """Validates that value is a positive integer."""
        if not isinstance(value, int):
            raise TypeError(f"{name} must be an integer")
        if value <= 0:
            raise ValueError(f"{name} must be greater than 0")

===========================
Checking for module docstring:

>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
True

>>> c = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(c) > 1
True

>>> mod_area = __import__("7-base_geometry").BaseGeometry.area.__doc__
>>> len(mod_area) > 1
True

>>> mod_validator = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> len(mod_validator) > 1
True


>>> bg = __import__('7-base_geometry').BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

>>> bg.integer_validator("average", 1.2)
Traceback (most recent call last):
    ...
TypeError: average must be an integer

>>> bg.integer_validator("list", [1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: list must be an integer

>>> bg.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
    ...
TypeError: dict must be an integer

>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
    ...
TypeError: tuple must be an integer

>>> bg.integer_validator("set", {1, 2, 3})
Traceback (most recent call last):
    ...
TypeError: set must be an integer

>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
    ...
TypeError: bool must be an integer

>>> bg.integer_validator("none", None)
Traceback (most recent call last):
    ...
TypeError: none must be an integer

>>> bg.integer_validator("infinity", float('inf'))
Traceback (most recent call last):
    ...
TypeError: infinity must be an integer

>>> bg.integer_validator("nan", float('nan'))
Traceback (most recent call last):
    ...
TypeError: nan must be an integer

>>> bg.integer_validator("min int", -2**31)
Traceback (most recent call last):
    ...
ValueError: min int must be greater than 0

===========================

This test file follows the structure of 1-my_list.txt, with clear sections
checking the existence of docstrings, methodfunctionality, and validation
behavior for both correct and incorrect inputs.
